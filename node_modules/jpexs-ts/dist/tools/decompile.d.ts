export declare type Items = 'all' | 'fla' | 'text' | 'script' | 'image' | 'shape' | 'movie' | 'font' | 'frame' | 'sprite' | 'button' | 'sound' | 'binaryData' | 'morphshape';
declare type Font_sub = 'ttf' | 'woff';
declare type Font = `font:${Font_sub}`;
declare type Text_sub = 'svg' | 'plain' | 'formatted';
declare type Text = `text:${Text_sub}`;
declare type Sound_sub = 'flv' | 'wav' | 'mp3_wav_flv';
declare type Sound = `sound:${Sound_sub}`;
declare type Image_sub = 'bmp' | 'png' | 'jpeg' | 'png_gif_jpeg';
declare type Image = `image:${Image_sub}`;
declare type Frame_sub = 'bmp' | 'png' | 'svg' | 'gif' | 'avi' | 'pdf' | 'canvas';
declare type Frame = `frame:${Frame_sub}`;
declare type Sprite_sub = 'bmp' | 'png' | 'svg' | 'gif' | 'avi' | 'pdf' | 'canvas';
declare type Sprite = `sprite:${Sprite_sub}`;
declare type Button_sub = 'bmp' | 'png' | 'svg';
declare type Button = `button:${Button_sub}`;
declare type Shape_sub = 'bmp' | 'png' | 'svg' | 'canvas';
declare type Shape = `shape:${Shape_sub}`;
declare type Script_sub = 'as' | 'hex' | 'pcode' | 'pcodehex';
declare type Script = `script:${Script_sub}`;
declare type Morphshape_sub = 'svg' | 'canvas';
declare type Morphshape = `morphshape:${Morphshape_sub}`;
declare type Format = Font | Text | Sound | Image | Frame | Sprite | Button | Shape | Script | Morphshape;
interface Options {
    file: string;
    output: string;
    formats?: Format[];
    items?: Items[];
    selectClass?: string[];
}
interface Callbacks {
    onError: (err: string) => void;
    onClose: () => void;
    onStdout: (data: string) => void;
}
export declare const decompile: (options: Options, callbacks: Callbacks) => void;
export {};
